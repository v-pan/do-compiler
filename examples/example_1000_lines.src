


fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

"Quote example"
fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

"Quote example"
fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}
fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}


fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}
fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
    fib(x-1)+fib(x-2)
  }
}

fun fib(x: Type, y: Type<Testing>): ReturnType {
  if x < 3 {
    1
  } else {
